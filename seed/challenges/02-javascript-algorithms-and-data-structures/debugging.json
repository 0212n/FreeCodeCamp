{
  "name": "Debugging",
  "order": 4,
  "time": "1 hour",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "9d7013c8c441eddfaeb5bdef",
      "title": "Use console.log to Check the Value of a Variable",
      "description": [
        "Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.",
        "You can find Developer tools in your Chrome's menu or Web Console in FireFox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.",
        "The console.log() method, which \"prints\" the output of what's within its parentheses to the console, will likely be your most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.",
        "Here's an example to print 'Hello world!' to the console:",
        "<code>console.log('Hello world!')</code>",
        "Instructions",
        "Use the console.log() method to print the value of the variable a where noted in the code."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let a = 5;",
        "let b = 1;",
        "a++;",
        "// Use console.log() below this line to check the value of a, it should output 6",
        "",
        "",
        "let sumAB = a + b;",
        "console.log(sumAB);"
      ],
      "tests": [
        "assert(code.test(/console\\.log\\(a\\)/gi)), 'message: Use <code>console.log()</code> to check the value of the variable <code>a</code>.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet a = 5;\nlet b = 1;\na++;\n// Use console.log() to check the value of a, it should output 6\nconsole.log(a);\n\nlet sumAB = a + b;\nconsole.log(sumAB);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7023c8c441eddfaeb5bdef",
      "title": "Using typeof to Check the Type of a Variable",
      "description": [
        "You can use typeof to check the data structure, or type, of a variable. This is useful in debugging when you're working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Especially take care when you're accessing and working with external data in the form of a JavaScript object (JSON).",
        "Here are some examples using typeof:",
        "<code>console.log(typeof \"\"); // outputs \"string\"</code>",
        "<code>console.log(typeof 0); // outputs \"number\"</code>",
        "<code>console.log(typeof []); // outputs \"object\"</code>",
        "<code>console.log(typeof {}); // outputs \"object\"</code>",
        "JavaScript recognizes six primitive (immutable) data types: Boolean, Null, Undefined, Number, String, and Symbol (new with ES6) and one type for mutable items: Object. Note that in JavaScript, arrays are technically a type of object.",
        "Instructions",
        "Add console.log() statements to check the typeof each of the two variables number7 and string3 in the code."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let number7 = 7;",
        "let string3 = \"3\";",
        "console.log(number7 + string3);",
        "// Add your code below this line"
      ],
      "tests": [
        "assert(code.test(/console.log\\(\\s*?typeof\\s*?\\(?number7\\)?\\s*?\\)/g), 'message: Use <code>typeof</code> in a <code>console.log()</code> statement to check the type of the <code>number7</code> variable.');",
        "assert(code.test(/console.log\\(\\s*?typeof\\s*?\\(?string3\\)?\\s*?\\)/g), 'message: Use <code>typeof</code> in a <code>console.log()</code> statement to check the type of the <code>string3</code> variable.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet number7 = 7;\nlet string3 = \"3\";\nconsole.log(number7 + string3);\n// Add your code below this line\nconsole.log(typeof number7);\nconsole.log(typeof string3);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7033c8c441eddfaeb5bdef",
      "title": "Catch Misspelled Variable and Function Names",
      "description": [
        "Now that we've covered the two primary ways to check intermediate values and types of program output, let's get into the common forms that bugs take. One syntax-level issue that folks with fast typing skills can commiserate with is the humble spelling error. Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. As you know, JavaScript variable and function names are case-sensitive.",
        "Instructions",
        "Fix the two spelling errors in the code so the netWorkingCapital calculation works."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let receivables = 10;",
        "let payables = 8;",
        "let netWorkingCapital = recievables - payable;",
        "console.log(`Net working capital is: ${netWorkingCapital}`);"
      ],
      "tests": [
        "assert(netWorkingCapital === 2, 'message: Check the spelling of the two variables used in the <code>netWorkingCapital</code> calculation, the console output should show that \"Net working capital is: 2\".');",
        "assert(!code.test(/recievables/g), 'message: Make sure the <code>receivables</code> variable is spelled correctly.');",
        "assert(!code.test(/payable\\s*?;/g), 'message: Make sure the <code>payables</code> variable is spelled correctly.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = receivables - payables;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7043c8c441eddfaeb5bdef",
      "title": "Catch Unclosed Parentheses, Brackets, Braces and Quotes",
      "description": [
        "Another syntax error to watch out for is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. This tends to happen when you are editing existing code and inserting items with one of the pair types. Also, take care when you're nesting code blocks into others, such as adding a callback function as an argument to a method.",
        "One way to avoid this mistake is as soon as you type the opening character, immediately type the closing match, then move your cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.",
        "Instructions",
        "Fix the two pair errors so the code runs without issues."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let myArray = [1, 2, 3;",
        "let addSeven = myArray.map((val => val + 7);",
        "console.log(`addSeven array is: ${addSeven}`);"
      ],
      "tests": [
        "assert(addSeven[0] === 8 && addSeven[1] === 9 && addSeven[2] === 10, 'message: Check the array and the <code>.map()</code> method for matching pairs. The console output should show that <code>addSeven</code> is <code>[8, 9, 10]</code>.');",
        "assert(code.test(/3\\s*?\\]\\s*?;/gi), 'message: The array should be enclosed with a matching set of brackets.');",
        "assert(code.test(/val\\s*?\\)\\s*?=>/gi), 'message: The <code>.map()</code> method's parameter should be enclosed with a matching set of parentheses.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet myArray = [1, 2, 3];\nlet addSeven = myArray.map((val) => val + 7);\nconsole.log(`addSeven array is: ${addSeven}`);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7053c8c441eddfaeb5bdef",
      "title": "Introduction to the Debugging Challenges",
      "description": [
        "Debugging is a valuable and (unfortunately) necessary tool for programmers. It follows the testing phase of checking if your code works as intended, and discovering it does not. Debugging is the process of routing out exactly what isn't working and fixing it.",
        "After spending time creating a brilliant block of code, it can be tough realizing it may have a flaw or two. These issues generally come in three forms - 1) syntax errors that prevent a program from running, 2) runtime errors when code fails to execute or has unexpected behavior, and 3) semantic (or logical) errors when code doesn't do what it's meant to. Modern code editors (and experience) can help identify syntax errors, but semantic and runtime errors can be harder to pin down. They may cause your program to crash, make it run forever, or give incorrect output. Think of debugging as trying to understand why your code is behaving the way it is.",
        "Example of a syntax error - often detected by the code editor:",
        "<code>funtion willNotWork( {</code>",
        "<code>  console.log(\"Yuck\");</code>",
        "<code>}</code>",
        "<code>// \"function\" keyword is misspelled and there's a missing parenthesis</code>",
        "Here's an example of a runtime error - often detected while the program executes:",
        "<code>function loopy() {</code>",
        "<code>  while(true) {</code>",
        "<code>      console.log(\"Hello, world!\");</code>",
        "<code>  }</code>",
        "<code>}</code>",
        "<code></code>",
        "<code>loopy(); // This kicks off an infinite loop, which may crash your browser</code>",
        "Example of a semantic error - often detected after testing code output:",
        "<code>function calcAreaOfRect(w, h) {</code>",
        "<code>  return w + h; // This should be w * h</code>",
        "<code>}</code>",
        "",
        "<code>let myRectArea = calcAreaOfRect(2, 3);</code>",
        "<code>// Correct syntax and the program executes, but this gives the wrong answer</code>",
        "Debugging is potentially frustrating, but it helps to develop (and follow) a systematic approach of checking the intermediate value and/or type of variables against what you think they should be. You can start with a simple process of elimination - if function A works and returned what it's supposed to, then function B may have the issue. Alternatively, you can start checking values in a block of code from the middle to try to cut the search space in half - a problem here indicates a bug in the first half, if not, it's likely in the second, and so on.",
        "This section will cover a couple helpful tools to find bugs, and some of the common forms they take. Fortunately, debugging is a learnable skill that just requires a little patience and practice to master."
      ],
      "challengeSeed": [],
      "tests": [],
      "solutions": [],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7073c8c441eddfaeb5bdef",
      "title": "Catch Mixed Usage of Single and Double Quotes",
      "description": [
        "JavaScript allows the use of both single ('') and double (\"\") quotes to declare a string, and deciding which one to use generally comes down to personal preference. Having two choices is great when your string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.",
        "Examples of mixing quotes:",
        "<code>// These work</code>",
        "<code>const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";</code>",
        "<code>const quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";</code>",
        "<code>// This is wrong</code>",
        "<code>const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';</code>",
        "Of course, if you prefer to only use one style of quotes, then you can escape the ones inside the string by using the backslash escape character:",
        "<code>const allSameQuotes = \"I've had a perfectly wonderful evening, but this wasn't it.\";</code>",
        "Instructions",
        "Fix the string so it either uses different quotes for the href value, or escape the existing ones."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let innerHtml = \"<p>Click here to <a href=\"#Home\">return home.</a></p>\"",
        "console.log(innerHtml);"
      ],
      "tests": [
        "assert(code.test(/href=('|\")#Home('|\")/gi), 'message: Fix the quotes around the <code>href</code> value \"#Home\" by either changing or escaping them.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet innerHtml = \"<p>Click here to <a href='#Home'>return home.</a></p>\"\nconsole.log(innerHtml);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7083c8c441eddfaeb5bdef",
      "title": "Catch Use of Assignment operator Instead of Equality Operator",
      "description": [
        "Branching programs, aka ones that do different things if certain conditions are met, rely on if, else if, and else statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value. How we speak this logic (in English, at least) is \"if x equals y, then ...\" which can literally translate into code using the =, or assignment operator, and unexpected control flow in your program.",
        "As you know, the assignment operator (=) in JavaScript assigns a value to a variable name. And the == and === operators check for equality (the triple === tests for strict equality, meaning both value and type are the same). The code below assigns x to be 2, which evaluates as true. Almost every value on its own in JavaScript evaluates to true, except the \"falsy\" values of false, 0, \"\" (an empty string), NaN, undefined, and null.",
        "<code>let x = 1;</code>",
        "<code>let y = 2;</code>",
        "<code>if (x = y) {</code>",
        "<code>  // this will run for any value of y (except for a falsy)</code>",
        "<code>} else {</code>",
        "<code>  // this is what should run (but won't) in this example</code>",
        "<code>}</code>",
        "Instructions",
        "Fix the condition so the program runs the right branch, and the appropriate value is assigned to result."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "let x = 7;",
        "let y = 9;",
        "let result = \"to come\";",
        "",
        "if(x = y) {",
        "    result = \"Equal!\";",
        "} else {",
        "    result = \"Not equal!\";",
        "}",
        "",
        "console.log(result);"
      ],
      "tests": [
        "assert(result == \"Not equal!\", 'message: Fix the code so it checks for equality, instead of using assignment in the condition.');",
        "assert(code.test(/if\\(x\\s*?(==|===)\\s*?y/gi), 'message: The condition can use either <code>==</code> or <code>===</code> to test for equality.');"
      ],
      "solutions": [
        "\"use strict\"\n\nlet x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x == y) {\n    result = \"Equal!\";\n} else {\n    result = \"Not equal!\";\n}\n\nconsole.log(result);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7093c8c441eddfaeb5bdef",
      "title": "Catch Missing Open and Closing Parenthesis After a Function Call",
      "description": [
        "When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when you try to call it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected when you're logging variable values (or their types) to the console and see one is set to a function reference, instead of the expected value the function returns.",
        "The variables in the following example are different:",
        "<code>function myFunction() {</code>",
        "<code>  return \"You rock!\";</code>",
        "<code>}</code>",
        "<code></code>",
        "<code>let varOne = myFunction; // set to equal a function</code>",
        "<code>let varTwo = myFunction(); // set to equal the string \"You rock!\"</code>",
        "Instructions",
        "Fix the code so result is set to the value returned from calling getNine."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "function getNine() {",
        "    let x = 6;",
        "    let y = 3;",
        "    return x + y;",
        "}",
        "",
        "let result = getNine;",
        "console.log(result);"
      ],
      "tests": [
        "assert(result == 9, 'message: Fix the code so the variable <code>result</code> is the number that the function <code>getNine</code> returns.');",
        "assert(code.test(/getNine\\(\\);/gi), 'message: Make sure to call the <code>getNine</code> function.');"
      ],
      "solutions": [
        "\"use strict\"\n\nfunction getNine() {\n    let x = 6;\n    let y = 3;\n    return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7103c8c441eddfaeb5bdef",
      "title": "",
      "description": [
        "Continuing our discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.",
        "Instructions",
        "The following function positivePowers raises a base to a positive exponent. Unfortunately, it's not called properly - fix the code so the value of test is the expected 8."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "function positivePowers(b, e) {",
        "    let result = 1;",
        "    if (e <= 0) return result;",
        "    for (let i = 1; i <= e; i++) {",
        "        result *= b;",
        "    }",
        "    return result;",
        "}",
        "",
        "let base = 2;",
        "let exp = 3;",
        "let test = positivePowers(exp, base);",
        "console.log(test);"
      ],
      "tests": [
        "assert(test == 8, 'message: Fix the code so the variable <code>text</code> equals 2 raised to the 3rd power, not 3 raised to the 2nd power.');",
        "assert(code.test(/positivePowers\\(\\s*?base,\\s*?exp\\s*?\\);/gi), 'message: Make sure the arguments for the <code>positivePowers</code> function call are in the right order.');"
      ],
      "solutions": [
        "use strict\"\n\nfunction positivePowers(b, e) {\n    let result = 1;\n    if (e <= 0) return result;\n    for (let i = 1; i <= e; i++) {\n        result *= b;\n    }\n    return result;\n}\n\nlet base = 2;\nlet exp = 3;\nlet test = positivePowers(base, exp);\nconsole.log(test);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7113c8c441eddfaeb5bdef",
      "title": "Use Caution when Reinitializing Variables inside a Loop",
      "description": [
        "Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.",
        "Printing variable values with each cycle of your loop by using console.log() can uncover buggy behavior related to resetting, or failing to reset a variable.",
        "Instructions",
        "The following function is supposed to create a two-dimensional array with m rows and n columns of zeroes. Unfortunately, it's not producing the expected output because the row variable isn't being reinitialized in the outer loop. Fix the code so it returns a correct 3x2 array of zeroes ([[0, 0], [0, 0], [0, 0]])."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "function zeroArray(m, n) {",
        "    // Creates a 2-D array with m rows and n columns of zeroes",
        "    let newArray = [];",
        "    let row = [];",
        "    for (let i = 0; i < m; i++) {",
        "        // Adds m rows into newArray",
        "",
        "        for (let j = 0; j < n; j++) {",
        "            // Adds n zeroes into the current row",
        "            row.push(0);",
        "        }",
        "        newArray.push(row);",
        "    }",
        "    return newArray;",
        "}",
        "",
        "let test = zeroArray(3, 2);",
        "console.log(test);"
      ],
      "tests": [
        "assert(JSON.stringify(test) === \"[[0,0],[0,0],[0,0]]\", 'message: <code>test</code> should be an array holding 3 rows of 2 columns of zeroes each.');",
        "assert(test.length === 3, 'message: <code>test</code> should have 3 rows.');",
        "assert(test[0].length === 2 && test[1].length === 2 && test[2].length === 2, 'message: <code>test</code> should have 2 columns in each row.');"
      ],
      "solutions": [
        "\"use strict\"\n\nfunction zeroArray(m, n) {\n    // Creates a 2-D array with m rows and n columns of zeroes\n    let newArray = [];    \n    for (let i = 0; i < m; i++) {\n        // Adds m rows into newArray\n        let row = [];\n        for (let j = 0; j < n; j++) {\n            // Adds n zeroes into the current row\n            row.push(0);\n        }\n        newArray.push(row);\n    }\n    return newArray;\n}\n\nlet test = zeroArray(3, 2);\nconsole.log(test);"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7123c8c441eddfaeb5bdef",
      "title": "Catch Off By One Errors when Using Indexing",
      "description": [
        "\"Off by one\" errors (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. As you know, JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print undefined. Also, read the documentation for any string or array methods that take index ranges as arguments, and understand if they are inclusive (the item at the given index is part of what's returned) or not.",
        "Here are some examples of off by one errors:",
        "<code>let alphabet = \"abcdefghijklmnopqrstuvwxyz\";</code>",
        "<code>let len = alphabet.length;</code>",
        "<code></code>",
        "<code>for (let i = 0; i <= len; i++) {</code>",
        "<code>    // loops one too many times</code>",
        "<code>    console.log(alphabet[i]);</code>",
        "<code>}</code>",
        "<code></code>",
        "<code>for (let j = 1; j < len; j++) {</code>",
        "<code>    // loops one too few times and misses the first character at index 0</code>",
        "<code>    console.log(alphabet[j]);</code>",
        "<code>}</code>",
        "<code></code>",
        "<code>for (let k = 0; k < len; k++) {</code>",
        "<code>    // Goldilocks approves - this is just right</code>",
        "<code>    console.log(alphabet[k]);</code>",
        "<code>}</code>",
        "Instructions",
        "Fix the two indexing errors in the following function so all the numbers 1 through 5 are printed to the console."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "function countToFive() {",
        "    let firstFive = \"12345\";",
        "    let len = firstFive.length;",
        "    for (let i = 1; i <= len; i++) {",
        "        console.log(firstFive[i]);",
        "    }",
        "}",
        "",
        "countToFive();"
      ],
      "tests": [
        "assert(code.test(/let i\\s*?=\\s*?0\\s*?;\\s*?i\\s*?<\\s*?len\\s*?;/g), 'message: Fix both the initial condition for <code>i</code> and the loop's terminal condition so all five numbers are printed to the console.');"
      ],
      "solutions": [
        "use strict\"\n\nfunction countToFive() {\n    let firstFive = \"12345\";\n    let len = firstFive.length;\n    for (let i = 0; i < len; i++) {\n        console.log(firstFive[i]);\n    }\n}\n\ncountToFive();"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    },
    {
      "id": "9d7133c8c441eddfaeb5bdef",
      "title": "Prevent Infinite Loops with a Valid Terminal Condition",
      "description": [
        "Our final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.",
        "We saw an example of an infinite loop in the introduction - there is no terminal condition to break out of this while loop:",
        "<code>function loopy() {</code>",
        "<code>  while(true) {</code>",
        "<code>      console.log(\"Hello, world!\");</code>",
        "<code>  }</code>",
        "<code>}</code>",
        "It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. Some errors include incrementing or decrementing a counter variable in the wrong direction from the terminal condition, or accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.",
        "Instructions",
        "The below function contains an infinite loop because the terminal condition i != 4 will never be reached - i will increment by 2 each pass, and jump right over 4 since it's odd to start. Fix the comparison operator in the terminal condition so the loop only runs for i up to 4."
      ],
      "challengeSeed": [
        "\"use strict\"",
        "",
        "function myFunc() {",
        "    for (let i = 1; i != 4; i += 2) {",
        "        console.log(\"Still going!\");",
        "    }",
        "}"
      ],
      "tests": [
        "assert(code.test(/for\\s*?\\(\\s*?let i\\s*?=\\s*?1;\\s*?i\\s*?(<=|<)\\s*?4\\s*?;\\s*?i\\s*?\\+=\\s*?2\\s*?\\)/g), 'message: Only change the comparison operator of <code>!=</code> in the terminal condition so the loop terminates for values bigger than 4. Don't change any other parts of the loop statement.');"
      ],
      "solutions": [
        "use strict\"\nfunction myFunc() {\n    for (let i = 1; i <= 4; i += 2) {\n        console.log(\"Still going!\");\n    }\n}"
      ],
      "hints": [],
      "type": "waypoint",
      "challengeType": 1,
      "translations": {
        "de": {
          "description": [],
          "title": ""
        },
        "fr": {
          "description": [],
          "title": ""
        },
        "pt-br": {
          "description": [],
          "title": ""
        },
        "ru": {
          "description": [],
          "title": ""
        }
      }
    }
  ]
}